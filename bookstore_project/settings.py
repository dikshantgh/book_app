"""
Django settings for bookstore_project project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import environ
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'z&l7g7919ec(k*m)*gf3bq5sk=6fqpbsme3m&5tl8vi-mg5qe('
env = environ.Env()
environ.Env.read_env()
SECRET_KEY = env('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# False if not in os.environ
DEBUG = env('DEBUG')

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',     # Django comes with an optional “sites” framework. It’s a hook for associating
                                # objects and functionality to particular websites, and it’s a holding place for the domain names and “verbose”
                                # names of your Django-powered sites.
    'crispy_forms',  # third party form
    'allauth',  # new provide support for third-party (social) authentication via services like Github, Gmail,
                # or Facebook
    'debug_toolbar', # new for debugging

    'allauth.account',  # new
    'allauth.socialaccount', # missing in book
    'users.apps.UsersConfig',  # new
    'pages.apps.PagesConfig',  # new
    'books.apps.BooksConfig',  # new

    'allauth.socialaccount.providers.facebook', # for facebook
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware', # new
]

INTERNAL_IPS = '127.0.0.1' # new IPS to match our web server that is 127.0.0.1
ROOT_URLCONF = 'bookstore_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {

    'default': env.db('DATABASE_URL'),
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': 'books_store1',
    #     'USER': 'postgres',
    #     'PASSWORD': 'nepal123',
    #     'HOST': 'localhost',
    #     'PORT': 5432
    # }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# Static assets like CSS, JavaScript, and images are a core component
STATIC_URL = '/static/'
# eg {% load static %}
# <img src="{% static "my_app/example.jpg" %}" alt="My image">

# static files directory. except for inside the app there might be static file outside of the app so use below code
# Store your static files in a folder called static in your app. For example my_app/static/my_app/example.jpg
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]  # new

# STATIC_ROOT is the location of static files for production so it must be set to
# a different name, typically staticfiles . When it comes time to deploy a Django
# project, the collectstatic  command will automatically compile all available static
# files throughout the entire project into a single directory. This is far faster than having
# static files sprinkled across the project as is the case in local development.

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # new

# The last setting is STATICFILES_FINDERS  which tells Django how to look for static
# file directories. It is implicitly set for us and although this is an optional step, I prefer
# to make it explicit in all projects.
#
# STATICFILES_FINDERS = [
#         "django.contrib.staticfiles.finders.FileSystemFinder",
#         "django.contrib.staticfiles.finders.AppDirectoriesFinder",
# ]


# To start with, Django
# refers to the former as static whereas anything uploaded by a user, whether it be a
# file or an image, is referred to as media .

"""• MEDIA_ROOT 213 is the absolute file system path to the directory for user-
uploaded files
• MEDIA_URL 214 is the URL we can use in our templates for the files"""
MEDIA_URL = '/media/' # new
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # new


AUTH_USER_MODEL = 'users.CustomUser'  # new appname.modelname

# redirecting after login
LOGIN_REDIRECT_URL = 'home'
# LOGOUT_REDIRECT_URL = 'home'  # new
ACCOUNT_LOGOUT_REDIRECT = 'home' # new

# django-crispy-forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'  # new

# django-allauth config
SITE_ID = 1 # new
"""Django’s sites framework is a powerful feature that allows one Django project to
control multiple sites. Given we only have one site in our project, we’ll set the SITE_ID
to 1 ."""

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # which is used when Django attempts to authenticate a user using
    # user name an password.
    'allauth.account.auth_backends.AuthenticationBackend', # new, allow us to switch over to using login via e-mail
    # and social network
)

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # new

# ACCOUNT_SESSION_REMEMBER = False # new to remember my session
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False # new

ACCOUNT_USERNAME_REQUIRED = False # new
ACCOUNT_AUTHENTICATION_METHOD = 'email' # new
ACCOUNT_EMAIL_REQUIRED = True # new
ACCOUNT_UNIQUE_EMAIL = True # new

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'

DEFAULT_FROM_EMAIL = 'dikku@djangobookstore.com'